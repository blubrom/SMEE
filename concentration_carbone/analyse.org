#+TITLE: Analyse de la concentration carbonne dans l'atmosphère

#+BEGIN_QUOTE
1. Réalisez un graphique qui vous montrera une oscillation périodique superposée à une évolution systématique plus lente.
2. Séparez ces deux phénomènes. Caractérisez l'oscillation
   périodique. Proposez un modèle simple de la contribution lente,
   estimez ses paramètres et tentez une extrapolation jusqu'à 2025
   (dans le but de pouvoir valider le modèle par des observations
   futures).
#+END_QUOTE

* Présentation des données
  les données proviennent du [[https://scrippsco2.ucsd.edu/data/atmospheric_co2/primary_mlo_co2_record.html][site web de l'institut Scripps]]. Elles ont
    été téléchargées le 24/11/2022 à 09h52 et peuvent être trouvées
    dans le fichier [[file:data/20221124_0952_monthly_in_situ_co2_mlo.csv][données de départ]].
Dans ce fichier, on peut trouver la description suivante:

#+BEGIN_QUOTE
The data file below contains 10 columns.  Columns 1-4 give the dates
    in several redundant formats. Column 5 below gives monthly Mauna
    Loa CO2 concentrations in micro-mol CO2 per mole (ppm), reported
    on the 2012 SIO manometric mole fraction scale.  This is the
    standard version of the data most often sought.  The monthly
    values have been adjusted to 24:00 hours on the 15th of each
    month.  Column 6 gives the same data after a seasonal adjustment
    to remove the quasi-regular seasonal cycle.  The adjustment
    involves subtracting from the data a 4-harmonic fit with a linear
    gain factor.  Column 7 is a smoothed version of the data generated
    from a stiff cubic spline function plus 4-harmonic functions with
    linear gain.  Column 8 is the same smoothed version with the
    seasonal cycle removed.  Column 9 is identical to Column 5 except
    that the missing values from Column 5 have been filled with values
    from Column 7.  Column 10 is identical to Column 6 except missing
    values have been filled with values from Column 8.  Missing values
    are denoted by *-99.99*
#+END_QUOTE

On peut y voir qu'il va falloir faire attention à la présence de
valeurs manquantes, qui seront indiquées par la valeur *-99.99*                                                            

* Préparation des données 

  les 54 premières lignes du fichier contiennent des descriptions.
  De plus, les noms de colonnes sont sur trois lignes (on ne gardera
  que la première, les suivantes servant juste à ajouter quelques
  précisions sur les unités par exemple). 
** Extraction des données
   #+begin_src python :results value :exports both :session
with open("data/20221124_0952_monthly_in_situ_co2_mlo.csv") as data:
  lines = [line.strip() for line in data]
data_lines = lines[57:]
header = [[t.strip() for t in lines[54].split(',')]]
table = [[t.strip() for t in line.split(',')] for line in data_lines]
table = header + table
table[:5]
   #+end_src

   #+RESULTS:
   |   Yr | Mn |  Date |      Date |    CO2 | seasonally |    fit | seasonally |    CO2 | seasonally |
   | 1958 | 01 | 21200 | 1958.0411 | -99.99 |     -99.99 | -99.99 |     -99.99 | -99.99 |     -99.99 |
   | 1958 | 02 | 21231 | 1958.1260 | -99.99 |     -99.99 | -99.99 |     -99.99 | -99.99 |     -99.99 |
   | 1958 | 03 | 21259 | 1958.2027 | 315.71 |     314.43 | 316.20 |     314.91 | 315.71 |     314.43 |
   | 1958 | 04 | 21290 | 1958.2877 | 317.45 |     315.16 | 317.30 |     314.99 | 317.45 |     315.16 |
** Supression des valeurs manquantes

  On a pu voir dans la description des données que les valeurs
  manquantes sont indiquiées par *-99.99*, nous allons donc enlever les
  lignes comprenant des valeurs manquantes (et les afficher pour en
  garder trace)

  #+BEGIN_SRC python :results output :exports both :session
valid_table = []
for row in table:
    missing = any([column == '-99.99' for column in row])
    if missing:
        print(row)
    else:
        valid_table.append(row)
  #+END_SRC

  #+RESULTS:
  #+begin_example
  ['1958', '01', '21200', '1958.0411', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99']
  ['1958', '02', '21231', '1958.1260', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99']
  ['1958', '06', '21351', '1958.4548', '-99.99', '-99.99', '317.26', '315.14', '317.26', '315.14']
  ['1958', '10', '21473', '1958.7890', '-99.99', '-99.99', '312.42', '315.41', '312.42', '315.41']
  ['1964', '02', '23422', '1964.1257', '-99.99', '-99.99', '320.04', '319.37', '320.04', '319.37']
  ['1964', '03', '23451', '1964.2049', '-99.99', '-99.99', '320.75', '319.41', '320.75', '319.41']
  ['1964', '04', '23482', '1964.2896', '-99.99', '-99.99', '321.84', '319.45', '321.84', '319.45']
  ['2022', '10', '44849', '2022.7890', '415.31', '418.93', '-99.99', '-99.99', '415.31', '418.93']
  ['2022', '11', '44880', '2022.8740', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99']
  ['2022', '12', '44910', '2022.9562', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99', '-99.99']
  #+end_example

On voit qu'il manque les deux premiers et derniers mois. Aussi, il
manque les données pour 3 mois consécutifs en 1964

** Extraction des colonnes utilisées

Nous souhaitons garder les deux premières colonnes afin d'avoir
l'année et le mois. Les troisème, et quatrième colonnes sont
redondantes.
Pour les données de concentration en CO2, on va se contenter de garder
la cinquième colonne, les colonnes restantes en étant plus ou moins
dérivées.

#+BEGIN_SRC python :result silent :exports both :session
year = [row[0] for row in valid_table]
assert year[0] == 'Yr'
del year[0]
month = [row[1] for row in valid_table]
assert month[0] == 'Mn'
del month[0]
concentration = [row[4] for row in valid_table]
assert concentration[0] == 'CO2'
del concentration[0]
data = list(zip(year, month, concentration))
#+END_SRC

#+RESULTS:

Regardons les premières et les dernières lignes. Nous insérons ~None~ pour indiquer à org-mode la séparation entre les trois sections du tableau: en-tête, début des données, fin des données.
#+BEGIN_SRC python :results value :exports both :session
[('Year', 'Month', 'Concentration'), None] + data[:5] + [None] + data[-5:]
#+END_SRC

#+RESULTS:
| Year | Month | Concentration |
|------+-------+---------------|
| 1958 |    03 |        315.71 |
| 1958 |    04 |        317.45 |
| 1958 |    05 |        317.51 |
| 1958 |    07 |        315.87 |
| 1958 |    08 |        314.93 |
|------+-------+---------------|
| 2022 |    05 |        420.77 |
| 2022 |    06 |        420.68 |
| 2022 |    07 |        418.68 |
| 2022 |    08 |        416.76 |
| 2022 |    09 |        415.41 |

** Vérification des données

Il est toujours prudent de vérifier si les données semblent
crédibles. 
Nous savons que les années sont données par 4 chiffres et sont
comprises entre 1958 et 2022, que les mois sont compris entre 1 et 12
et que les concentrations sont des nombres positifs, elles devraient
être comprises entre 300 et 500 d'après la figue qu'on peut trouver
sur le site du scripps.
#+BEGIN_SRC python :results output :exports both :session
for year, month, concentration in data:
    if len(year) != 4 or not year.isdigit() or not (int(year) >= 1958 and int(year) <= 2022):
        print("Valeur suspecte dans la colonne 'year': ", (year, month, concentration))
    if len(month) != 2 or not month.isdigit() or not(int(month) >= 1 and int(month) <= 12):
        print("Valeur suspecte dans la colonne 'month': ", (year, month, concentration))
    if float(concentration) < 300.0 or float(concentration) > 500.0:
        print("Valeur suspecte dans la colonne 'concentration': ",(year, month, concentration))
#+END_SRC

#+RESULTS:

Pas de problème !

** Conversions
Pour faciliter les traitements suivants, nous remplaçons les colonnes
Yr et Mn par une colonne avec la date au 15 du mois (c'est le jour
indiqué comme référence dans la description des données)

#+BEGIN_SRC python :results silent :exports both :session
import datetime
converted_data = [(datetime.datetime.strptime(year + ':' + month + ":15" , '%Y:%m:%d').date(),
                  float(concentration))
                  for year, month, concentration in data]
#+END_SRC

Regardons de nouveau les premières et les dernières lignes:
#+BEGIN_SRC python :results value :exports both :session
str_data = [(str(date), str(concentration)) for date, concentration in converted_data]
[('date', 'concentration'), None] + str_data[:5] + [None] + str_data[-5:]
#+END_SRC

#+RESULTS:
|       date | concentration |
|------------+---------------|
| 1958-03-15 |        315.71 |
| 1958-04-15 |        317.45 |
| 1958-05-15 |        317.51 |
| 1958-07-15 |        315.87 |
| 1958-08-15 |        314.93 |
|------------+---------------|
| 2022-05-15 |        420.77 |
| 2022-06-15 |        420.68 |
| 2022-07-15 |        418.68 |
| 2022-08-15 |        416.76 |
| 2022-09-15 |        415.41 |

** Vérification des dates

Nous faisons encore une vérification: nos dates doivent être séparées
d'exactement un mois, sauf autour des points manquants.
Pour vérifier cela, nous vérifions que la différence entre les dates
est contenue entre 28 et 31 jours, ce qui est la longueur d'un mois.

#+BEGIN_SRC python :results output :exports both :session
dates = [date for date, _ in converted_data]
def diff_month(d1, d2):
    return (d1.year - d2.year) * 12 + d1.month - d2.month
for date1, date2 in zip(dates[:-1], dates[1:]):
    if date2-date1 < datetime.timedelta(days=28) or date2-date1 > datetime.timedelta(days=31):
        print(f"Il y a {date2-date1} entre {date1} et {date2}")
#+END_SRC

#+RESULTS:
: Il y a 61 days, 0:00:00 entre 1958-05-15 et 1958-07-15
: Il y a 61 days, 0:00:00 entre 1958-09-15 et 1958-11-15
: Il y a 121 days, 0:00:00 entre 1964-01-15 et 1964-05-15

On ne trouve pas de dates incohérentes autres que pour les endroits où
des donéees sont manquantes.

** Export des données pour pouvoir les analyser avec R

   #+begin_src python :results silent :exports both :session
with open("data/clean_data.csv", "w") as out:    
  out.write("date, concentration\n")
  for d,c in converted_data:
    out.write(f"{d},{c}\n")
   #+end_src

   #+RESULTS:

* Analyse des données


    #+begin_src R :results output :session *R* :exports both
    library(dplyr)
      #+end_src

      #+RESULTS:
      #+begin_example

      Attachement du package : ‘dplyr’

      Les objets suivants sont masqués depuis ‘package:stats’:

	  filter, lag

      Les objets suivants sont masqués depuis ‘package:base’:

	  intersect, setdiff, setequal, union
      #+end_example


      #+begin_src R :results output :session *R* :exports both
df <- read.csv("data/clean_data.csv", sep=',', header=T)
head(df %>% as_tibble())
      #+end_src

      #+RESULTS:
      #+begin_example

      # A tibble: 6 × 2
	date       concentration
	<chr>              <dbl>
      1 1958-03-15          316.
      2 1958-04-15          317.
      3 1958-05-15          318.
      4 1958-07-15          316.
      5 1958-08-15          315.
      6 1958-09-15          313.
      #+end_example


